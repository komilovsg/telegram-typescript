"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const AppGenerator_1 = __importDefault(require("./app-generator/AppGenerator"));
const AppConfigurator_1 = __importDefault(require("./app-configurator/AppConfigurator"));
function createApp() {
    return __awaiter(this, void 0, void 0, function* () {
        const configurator = new AppConfigurator_1.default();
        const appConfig = yield configurator.askUser();
        const generator = new AppGenerator_1.default(appConfig);
        yield generator.createApp();
        return appConfig;
    });
}
function readAppMeta() {
    const configData = fs_1.default.readFileSync(path_1.default.resolve(__dirname, '../package.json'), 'utf8');
    const packageJson = JSON.parse(configData);
    if (typeof packageJson.name === 'string' &&
        typeof packageJson.version === 'string') {
        return packageJson;
    }
    throw new Error('Can not read "name" and "version" from package.json.');
}
const appMeta = readAppMeta();
console.info(`ðŸš€ ${appMeta.name} v${appMeta.version}\n`);
createApp()
    .then((config) => {
    const message = '\nIt\'s time to craft!' +
        `\n\ncd ${config.name}\nnpm install\nnpm run build:dev` +
        '\n\nFor more information visit https://github.com/barinbritva/init-typescript-app';
    console.info(message);
    process.exit(0);
})
    .catch((error) => {
    console.error('Failed to create app.', error);
    process.exit(1);
});
