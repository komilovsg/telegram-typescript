"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ejs_1 = __importDefault(require("ejs"));
class AppGenerator {
    constructor(appConfig) {
        this.config = appConfig;
        this.projectPath = path_1.default.join(process.cwd(), this.config.name);
        this.templatesPath = path_1.default.join(__dirname, '../../', 'scaffold');
    }
    createApp() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.createAppFolder();
                if (this.config.license !== null) {
                    const licenseFile = this.config.license.name.replace(/"/g, '');
                    yield this.copyFile({
                        from: `_licenses/${licenseFile}`,
                        to: 'LICENSE',
                        data: {
                            year: new Date().getFullYear(),
                            author: this.config.author
                        }
                    });
                }
                if (this.config.tsAdvanced) {
                    yield this.copyFile({
                        from: '_tsconfig/tsconfig-advanced.json',
                        to: 'tsconfig.json'
                    });
                }
                else {
                    yield this.copyFile({
                        from: '_tsconfig/tsconfig-base.json',
                        to: 'tsconfig.json'
                    });
                }
                yield this.copyFile({
                    from: '_tsconfig/tsconfig-dev.json',
                    to: 'tsconfig-dev.json'
                });
                yield this.copyFile('tasks/process.ts');
                yield this.copyFile('tasks/build.ts');
                yield this.copyFile('tasks/run-build.ts');
                if (this.config.isNpmPackage) {
                    yield this.copyFile('tasks/release.ts');
                    yield this.copyFile('tasks/run-release.ts');
                }
                yield this.copyFile({
                    from: '_gitignore',
                    to: '.gitignore'
                });
                yield this.copyFile({
                    from: 'package.json.ejs',
                    data: {
                        name: this.config.name,
                        author: this.config.author,
                        license: this.config.license,
                        isNpmPackage: this.config.isNpmPackage
                    }
                });
                yield this.copyFile('README.md');
                yield this.copyFile('src/Greeter.ts');
                yield this.copyFile({
                    from: 'src/index.ts.ejs',
                    data: {
                        author: this.config.author,
                        projectName: this.config.name
                    }
                });
            }
            catch (error) {
                yield this.removeAppFolder();
                throw error;
            }
        });
    }
    createAppFolder() {
        fs_1.default.mkdirSync(this.config.name);
    }
    removeAppFolder() {
        fs_1.default.rmdirSync(this.config.name, { recursive: true });
    }
    copyFile(fileOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            let from;
            let to;
            let data;
            if (typeof fileOptions === 'object') {
                from = fileOptions.from;
                to = fileOptions.to;
                data = fileOptions.data;
            }
            else {
                from = fileOptions;
            }
            const copyDestPath = this.removeEjsExtensionFromPath(to !== null && to !== void 0 ? to : from);
            const absoluteCopyDestPath = path_1.default.join(this.projectPath, copyDestPath);
            const absoluteCopyDestDir = path_1.default.dirname(absoluteCopyDestPath);
            const content = yield ejs_1.default.renderFile(path_1.default.join(this.templatesPath, from), data !== null && data !== void 0 ? data : {});
            const isDestFolderExists = fs_1.default.existsSync(absoluteCopyDestDir);
            if (!isDestFolderExists) {
                fs_1.default.mkdirSync(absoluteCopyDestDir, { recursive: true });
            }
            fs_1.default.writeFileSync(absoluteCopyDestPath, content);
            return absoluteCopyDestPath;
        });
    }
    removeEjsExtensionFromPath(filePath) {
        if (path_1.default.extname(filePath) === '.ejs') {
            filePath = filePath.replace('.ejs', '');
        }
        return filePath;
    }
}
exports.default = AppGenerator;
