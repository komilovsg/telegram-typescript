"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const inquirer_1 = __importDefault(require("inquirer"));
const ConfigProperty_1 = __importDefault(require("./ConfigProperty"));
const licenses_1 = __importDefault(require("./licenses"));
class AppConfigurator {
    askUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const questions = [
                {
                    type: 'input',
                    name: ConfigProperty_1.default.Name,
                    message: 'Project name:',
                    validate(input) {
                        if (input.length === 0) {
                            return 'Project name can not be empty.';
                        }
                        if (fs_1.default.existsSync(input)) {
                            return `Folder with name "${input}" already exists.`;
                        }
                        return true;
                    }
                },
                {
                    type: 'list',
                    name: ConfigProperty_1.default.NpmPackage,
                    message: 'Project type:',
                    choices: [
                        {
                            name: 'npm package',
                            value: true
                        },
                        {
                            name: 'some app',
                            value: false
                        }
                    ]
                },
                {
                    type: 'list',
                    name: ConfigProperty_1.default.License,
                    message: 'Choose license:',
                    suffix: '\nSelect "None" if don\'t care.',
                    choices: this.generateLicenseOptions(),
                    loop: false
                },
                {
                    type: 'input',
                    name: ConfigProperty_1.default.Author,
                    message: 'Author name:',
                    suffix: '\nFor using in license agreement.\n',
                    when: (answers) => {
                        return answers.license != null;
                    },
                    validate(input) {
                        if (input.length === 0) {
                            return 'Author name can not be empty if a license chosen.';
                        }
                        return true;
                    }
                },
                {
                    type: 'list',
                    name: ConfigProperty_1.default.TsAdvanced,
                    message: 'Base or Advanced type checking:',
                    suffix: '\nBase is recommended for beginners in TypeScript.',
                    choices: [
                        {
                            name: 'Base type checking',
                            value: false
                        },
                        {
                            name: 'Advanced type checking',
                            value: true
                        }
                    ]
                }
            ];
            const config = yield inquirer_1.default.prompt(questions);
            if (config.author == null) {
                config.author = '';
            }
            return config;
        });
    }
    generateLicenseOptions() {
        const options = licenses_1.default.map((license) => {
            return {
                name: license.name,
                value: license
            };
        });
        options.unshift({
            name: 'None',
            value: null
        });
        return options;
    }
}
exports.default = AppConfigurator;
